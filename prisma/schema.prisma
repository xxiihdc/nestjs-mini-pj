// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PlanType {
  FREE
  PRO
  BUSINESS
}

enum WorkingType {
  NORMAL
  OVER_TIME
  PAID_LEAVE
  UNPAID_LEAVE
}

enum EmployeeStatus {
  WORKING
  RETIRED
  PROBATIONARY
}

enum contractType {
  PERMANENT
  FIXED_TERM
  PART_TIME
}

model Admin {
  id                Int      @id @default(autoincrement())
  username          String
  encryptedPassword String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model User {
  id                Int      @id @default(autoincrement())
  employeeId        Int      @unique
  employee          Employee @relation(fields: [employeeId], references: [id])
  role Role @default(USER)
  encryptedPassword String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Employee {
  id                Int             @id @default(autoincrement())
  code              String          @unique
  fullName          String
  companyEmail      String
  companyUniqueName String?
  status            EmployeeStatus  @default(WORKING)
  contractStartDate         DateTime
  contractEndDate           DateTime?
  contractType      contractType @default(PERMANENT)
  User              User?
  companyId         Int
  company           Company         @relation(fields: [companyId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  UserTimeSheet     UserTimeSheet[] @relation("OwnerRelation")
  EditedTimeSheet   UserTimeSheet[] @relation("EditRelation")
}

model Company {
  id            Int        @id @default(autoincrement())
  planType      PlanType   @default(FREE)
  name          String
  companyDomain String
  status        Boolean
  Group         Group[]
  Employee      Employee[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Holiday       Holiday[]
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  companyId   Int
  company     Company  @relation(fields: [companyId], references: [id])
  parentId    Int?     @unique
  parentGroup Group?   @relation("GroupRelation", fields: [parentId], references: [id])
  childGroup  Group[]  @relation("GroupRelation")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Holiday {
  id          Int      @id @default(autoincrement())
  date        DateTime @db.Date
  companyId   Int
  Company     Company  @relation(fields: [companyId], references: [id])
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserTimeSheet {
  id         Int       @id @default(autoincrement())
  employeeId Int
  employee   Employee  @relation("OwnerRelation", fields: [employeeId], references: [id])
  startTime  DateTime
  endTime    DateTime?
  editedById Int?
  Edited     Employee? @relation("EditRelation", fields: [editedById], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       String
}
